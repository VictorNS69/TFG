==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: AlastriaCredentialRegistry
Function name: addSubjectCredential(bytes32,string)
PC address: 1496
Estimated Gas Usage: 36117 - 161867
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: /tmp/registry/AlastriaCredentialRegistry.sol:65

function addSubjectCredential(bytes32 subjectCredentialHash, string URI) public {
        require(!subjectCredentialRegistry[msg.sender][subjectCredentialHash].exists);
        subjectCredentialRegistry[msg.sender][subjectCredentialHash] = SubjectCredential(true, Status.Valid, URI);
        subjectCredentialList[msg.sender].push(subjectCredentialHash);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCredentialStatus(bytes32,uint8), txdata: 0xdd517e1000010000000000000001020101000000000000000000000001020100000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: addSubjectCredential(bytes32,string), txdata: 0xe04ce02c8000080010080801080002040200040001010101010101012000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AlastriaCredentialRegistry
Function name: issuerCredentialList(address,uint256)
PC address: 1587
Estimated Gas Usage: 1110 - 1395
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/registry/AlastriaCredentialRegistry.sol:42

mapping(address => bytes32[]) public issuerCredentialList

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issuerCredentialList(address,uint256), txdata: 0x41e61ff8, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AlastriaCredentialRegistry
Function name: getCredentialStatus(uint8,uint8)
PC address: 2076
Estimated Gas Usage: 370 - 465
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/registry/AlastriaCredentialRegistry.sol:55

status >= STATUS_FIRST

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getCredentialStatus(uint8,uint8), txdata: 0x5faf7d940000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AlastriaCredentialRegistry
Function name: getCredentialStatus(uint8,uint8)
PC address: 2149
Estimated Gas Usage: 543 - 638
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/registry/AlastriaCredentialRegistry.sol:55

status >= STATUS_FIRST

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getCredentialStatus(uint8,uint8), txdata: 0x5faf7d9400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AlastriaCredentialRegistry
Function name: subjectCredentialList(address,uint256)
PC address: 2750
Estimated Gas Usage: 1286 - 1571
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/registry/AlastriaCredentialRegistry.sol:33

mapping(address => bytes32[]) public subjectCredentialList

--------------------
Initial State:

Account: [CREATOR], balance: 0xfa001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: subjectCredentialList(address,uint256), txdata: 0xc43f6b36, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AlastriaCredentialRegistry
Function name: updateCredentialStatus(bytes32,uint8)
PC address: 3230
Estimated Gas Usage: 505 - 600
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: /tmp/registry/AlastriaCredentialRegistry.sol:55

status >= STATUS_FIRST

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000b1840, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCredentialStatus(bytes32,uint8), txdata: 0xdd517e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: AlastriaCredentialRegistry
Function name: addSubjectCredential(bytes32,string)
PC address: 4446
Estimated Gas Usage: 31047 - 136704
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addIssuerCredential(bytes32), txdata: 0xdc11e39b, value: 0x0
Caller: [SOMEGUY], function: addSubjectCredential(bytes32,string), txdata: 0xe04ce02cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff64, value: 0x0


